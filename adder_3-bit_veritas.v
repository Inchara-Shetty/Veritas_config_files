// Generated by bench2verilog.py
// Generated by bench2verilog.py
module adder_3_bit(
    A1, A2, A3, B1, B2, B3, C1, C2, Cin, S2, S3, Cout, S
);

  input  A1, A2, A3, B1, B2, B3, C1, C2, Cin, S2, S3;
  output Cout, S;
  wire   CONST0, CONST1, Cout_or, Cout_term_0, Cout_term_1, Cout_term_2, Cout_term_3, Cout_term_4, Cout_term_5, Cout_term_6, Cout_term_7, Cout_term_8, S_or, S_term_10, S_term_12, S_term_14, S_term_16, S_term_18, S_term_2, S_term_20, S_term_22, S_term_24, S_term_26, S_term_28, S_term_30, S_term_4, S_term_6, S_term_8, n_A1, n_A2, n_A3, n_B1, n_B2, n_B3, n_C1, n_C2, n_Cin, n_S2, n_S3;

  assign CONST0 = (A1 & n_A1);
  assign CONST1 = (A1 | n_A1);
  assign Cout = Cout_or;
  assign Cout_or = (Cout_term_0 | Cout_term_1 | Cout_term_2 | Cout_term_3 | Cout_term_4 | Cout_term_5 | Cout_term_6 | Cout_term_7 | Cout_term_8);
  assign Cout_term_0 = (A1 & B1);
  assign Cout_term_1 = (B1 & Cin);
  assign Cout_term_2 = (A1 & Cin);
  assign Cout_term_3 = (A2 & B2);
  assign Cout_term_4 = (B2 & C1);
  assign Cout_term_5 = (A2 & C1);
  assign Cout_term_6 = (A3 & B3);
  assign Cout_term_7 = (B3 & C2);
  assign Cout_term_8 = (A3 & C2);
  assign S = S_or;
  assign S_or = (A1 | B1 | S_term_2 | n_B1 | S_term_4 | B1 | S_term_6 | n_B1 | S_term_8 | B2 | S_term_10 | n_B2 | S_term_12 | B2 | S_term_14 | n_B2 | S_term_16 | B3 | S_term_18 | n_B3 | S_term_20 | B3 | S_term_22 | n_B3 | S_term_24 | S3 | S_term_26 | n_S3 | S_term_28 | n_S3 | S_term_30 | S3 | C2);
  assign S_term_10 = (C1 & n_A2);
  assign S_term_12 = (n_C1 & n_A2);
  assign S_term_14 = (C1 & A2);
  assign S_term_16 = (C1 & A3);
  assign S_term_18 = (C2 & n_A3);
  assign S_term_2 = (Cin & n_A1);
  assign S_term_20 = (n_C2 & n_A3);
  assign S_term_22 = (C2 & A3);
  assign S_term_24 = (C2 & n_S2);
  assign S_term_26 = (C2 & n_S2);
  assign S_term_28 = (n_C2 & S2);
  assign S_term_30 = (n_C2 & S2);
  assign S_term_4 = (n_Cin & n_A1);
  assign S_term_6 = (Cin & A1);
  assign S_term_8 = (Cin & A2);
  assign n_A1 = ~(A1);
  assign n_A2 = ~(A2);
  assign n_A3 = ~(A3);
  assign n_B1 = ~(B1);
  assign n_B2 = ~(B2);
  assign n_B3 = ~(B3);
  assign n_C1 = ~(C1);
  assign n_C2 = ~(C2);
  assign n_Cin = ~(Cin);
  assign n_S2 = ~(S2);
  assign n_S3 = ~(S3);

endmodule

